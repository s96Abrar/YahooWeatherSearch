1.WeatherTree(): The one and only constructor for the class, pretty much all that is does is setup the sentinial node

2.~WeatherTree(): Destructor that deletes all the memory that was allocated for the tree

3.void printSavedLocations(): Prints all the names of the saved locations to the command line

4.void printAllWeather(): Prints all the weather data that is stored locally in the balanced binary tree

5.int countWeatherNodes(): Counts the number of nodes in the binary tree and returns the value

6.void deleteWeatherNode(std::string city): Allows for deletion of a node it takes the city name as an argument

7.void addWeatherNode(std::string name, std::string date, std::string current, std::string currentConditions, std::string high,std::string low): Adds weather data to a node. It takes the name of the city, date and time of data download, current temperature, current conditions(cloudy, rainy etc), highest temperature of the day and the lowest temperature of the day as arguments. 

8.void findCity(std::string city): Searches for a city and prints the locally stored weather data of that city, takes the city name as an argument.

9.void isValid(): Checks to see if the Red Black tree contains any voilations

10.int countLongestPath(): counts the longest path in the tree(excluding the root)

11.void newQuery(std::string city,std::string state, bool addToTree): makes a new query to yahoo's weather API and adds the data to the tree if required. It takes the name of the city, the state/country and a boolean to tell it whether to add it to the tree or not.

12.void readFileIntoTree(std::string): Reads a file into the binary tree, takes a filename as an argument
